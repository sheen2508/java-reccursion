import java.util.Scanner;

import java.lang.Math;
import java.util.List;
import java.util.Arrays;
public class solution {

	// Return a string array that contains all the possible strings
	public static String[] keypad(int pp){
        String temp = Integer.toString(pp);
int[] input = new int[temp.length()];
for (int i = 0; i < temp.length(); i++)
{
    input[i] = temp.charAt(i) - '0';
}
        List<List<Character>> keypad1 = Arrays.asList(
				// 0 and 1 digit don't have any characters associated
				Arrays.asList(),
				Arrays.asList(),
				Arrays.asList( 'a', 'b', 'c' ),
				Arrays.asList( 'd', 'e', 'f' ),
				Arrays.asList( 'g', 'h', 'i' ),
				Arrays.asList( 'j', 'k', 'l' ),
				Arrays.asList( 'm', 'n', 'o' ),
				Arrays.asList( 'p', 'q', 'r', 's'),
				Arrays.asList( 't', 'u', 'v' ),
				Arrays.asList( 'w', 'x', 'y', 'z')
		);

        
        
  findCombinations(keypad1, input, "",  input.length - 1);
        String aa[]={""};
        return aa;
    }
public static void findCombinations(List<List<Character>> keypad1,
										int[] input, String res, int index)
	{
if (index == -1)
		{
			System.out.println(res );
			return;
		}

		// stores current digit
		int digit = input[index];

		// size of the list corresponding to current digit
		int len = keypad1.get(digit).size();

		// one by one replace the digit with each character in the
		// corresponding list and recur for next digit
		for (int i = 0; i < len; i++) {
			findCombinations(keypad1, input, keypad1.get(digit).get(i) + res,
							index - 1);
		}
}
}


public class runner {
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int input = s.nextInt();
		String output[] = solution.keypad(input);
		for(int i = 0; i < output.length; i++) {
			System.out.println(output[i]);
		}
	}
}
